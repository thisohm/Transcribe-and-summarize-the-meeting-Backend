# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import src.modules.vataya.vataya_pb2 as vataya__pb2


class VatayaServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Connect = channel.unary_unary(
            '/service.VatayaService/Connect',
            request_serializer=vataya__pb2.ClientInfo.SerializeToString,
            response_deserializer=vataya__pb2.ConnectInfo.FromString,
        )
        self.Recognize = channel.stream_stream(
            '/service.VatayaService/Recognize',
            request_serializer=vataya__pb2.AudioData.SerializeToString,
            response_deserializer=vataya__pb2.RecogData.FromString,
        )


class VatayaServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Recognize(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VatayaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Connect': grpc.unary_unary_rpc_method_handler(
            servicer.Connect,
            request_deserializer=vataya__pb2.ClientInfo.FromString,
            response_serializer=vataya__pb2.ConnectInfo.SerializeToString,
        ),
        'Recognize': grpc.stream_stream_rpc_method_handler(
            servicer.Recognize,
            request_deserializer=vataya__pb2.AudioData.FromString,
            response_serializer=vataya__pb2.RecogData.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'service.VatayaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class VatayaService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Connect(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.VatayaService/Connect',
                                             vataya__pb2.ClientInfo.SerializeToString,
                                             vataya__pb2.ConnectInfo.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Recognize(request_iterator,
                  target,
                  options=(),
                  channel_credentials=None,
                  call_credentials=None,
                  insecure=False,
                  compression=None,
                  wait_for_ready=None,
                  timeout=None,
                  metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/service.VatayaService/Recognize',
                                               vataya__pb2.AudioData.SerializeToString,
                                               vataya__pb2.RecogData.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
